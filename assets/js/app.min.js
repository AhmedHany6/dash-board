"use strict";

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}

function _classCallCheck(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(e, t) {
    for (var n = 0; n < t.length; n++) {
        var a = t[n];
        a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, _toPropertyKey(a.key), a)
    }
}

function _createClass(e, t, n) {
    return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), Object.defineProperty(e, "prototype", {
        writable: !1
    }), e
}

function _toPropertyKey(e) {
    e = _toPrimitive(e, "string");
    return "symbol" == _typeof(e) ? e : e + ""
}

function _toPrimitive(e, t) {
    if ("object" != _typeof(e) || !e) return e;
    var n = e[Symbol.toPrimitive];
    if (void 0 === n) return ("string" === t ? String : Number)(e);
    n = n.call(e, t || "default");
    if ("object" != _typeof(n)) return n;
    throw new TypeError("@@toPrimitive must return a primitive value.")
}

function _toConsumableArray(e) {
    return _arrayWithoutHoles(e) || _iterableToArray(e) || _unsupportedIterableToArray(e) || _nonIterableSpread()
}

function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
}

function _unsupportedIterableToArray(e, t) {
    var n;
    if (e) return "string" == typeof e ? _arrayLikeToArray(e, t) : "Map" === (n = "Object" === (n = Object.prototype.toString.call(e).slice(8, -1)) && e.constructor ? e.constructor.name : n) || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(e, t) : void 0
}

function _iterableToArray(e) {
    if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e)
}

function _arrayWithoutHoles(e) {
    if (Array.isArray(e)) return _arrayLikeToArray(e)
}

function _arrayLikeToArray(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var n = 0, a = new Array(t); n < t; n++) a[n] = e[n];
    return a
}! function(o) {
    function e() {
        o(window).on("load", function() {
            o("#status").fadeOut(), o("#preloader").delay(350).fadeOut("slow")
        }), lucide.createIcons();
        _toConsumableArray(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function(e) {
            return new bootstrap.Popover(e)
        }), _toConsumableArray(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function(e) {
            return new bootstrap.Tooltip(e)
        }), _toConsumableArray(document.querySelectorAll(".offcanvas")).map(function(e) {
            return new bootstrap.Offcanvas(e)
        });
        var e = document.getElementById("toastPlacement");
        e && document.getElementById("selectToastPlacement").addEventListener("change", function() {
            e.dataset.originalClass || (e.dataset.originalClass = e.className), e.className = e.dataset.originalClass + " " + this.value
        });
        [].slice.call(document.querySelectorAll(".toast")).map(function(e) {
            return new bootstrap.Toast(e)
        });
        var a = document.getElementById("liveAlertPlaceholder"),
            t = document.getElementById("liveAlertBtn");
        t && t.addEventListener("click", function() {
            var e, t, n;
            e = "Nice, you triggered this alert message!", t = "success", (n = document.createElement("div")).innerHTML = ['<div class="alert alert-'.concat(t, ' alert-dismissible" role="alert">'), "   <div>".concat(e, "</div>"), '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>', "</div>"].join(""), a.append(n)
        }), document.getElementById("app-style").href.includes("rtl.min.css") && (document.getElementsByTagName("html")[0].dir = "rtl")
    }

    function t() {
        var c, e;
        o(".side-nav").length && (c = function(e, t, n, a) {
            return (e /= a / 2) < 1 ? n / 2 * e * e + t : -n / 2 * (--e * (e - 2) - 1) + t
        }, e = o(".side-nav li .collapse"), o(".side-nav li [data-bs-toggle='collapse']").on("click", function(e) {
            return !1
        }), e.on({
            "show.bs.collapse": function(e) {
                var t = o(e.target).parents(".collapse.show");
                o(".side-nav .collapse.show").not(e.target).not(t).collapse("hide")
            }
        }), o(".side-nav a").each(function() {
            var e = window.location.href.split(/[?#]/)[0];
            this.href == e && (o(this).addClass("active"), o(this).parent().addClass("menuitem-active"), o(this).parent().parent().parent().addClass("show"), o(this).parent().parent().parent().parent().addClass("menuitem-active"), "sidebar-menu" !== (e = o(this).parent().parent().parent().parent().parent().parent()).attr("id") && e.addClass("show"), o(this).parent().parent().parent().parent().parent().parent().parent().addClass("menuitem-active"), "wrapper" !== (e = o(this).parent().parent().parent().parent().parent().parent().parent().parent().parent()).attr("id") && e.addClass("show"), (e = o(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent()).is("body") || e.addClass("menuitem-active"))
        }), setTimeout(function() {
            var e, n, a, o, r, i, t = document.querySelector("li.menuitem-active .active");
            null != t && (e = document.querySelector(".leftside-menu .simplebar-content-wrapper"), t = t.offsetTop - 300, e) && 100 < t && (a = 600, o = (n = e).scrollTop, r = t - o, i = 0, function e() {
                var t = c(i += 20, o, r, a);
                n.scrollTop = t, i < a && setTimeout(e, 20)
            }())
        }, 200))
    }
    var n, a, r, i;
    e(), o(document).on("click", '.card a[data-bs-toggle="remove"]', function(e) {
        e.preventDefault();
        var e = o(this).closest(".card"),
            t = e.parent();
        e.remove(), 0 == t.children().length && t.remove()
    }), o(document).on("click", '.card a[data-bs-toggle="reload"]', function(e) {
        e.preventDefault();
        var e = o(this).closest(".card"),
            t = (e.append('<div class="card-disabled"><div class="card-portlets-loader"></div></div>'), e.find(".card-disabled"));
        setTimeout(function() {
            t.fadeOut("fast", function() {
                t.remove()
            })
        }, 500 + 5 * Math.random() * 300)
    }), o(".dropdown-menu a.dropdown-toggle").on("click", function() {
        var e = o(this).next(".dropdown-menu"),
            e = o(this).parent().parent().find(".dropdown-menu").not(e);
        return e.removeClass("show"), e.parent().find(".dropdown-toggle").removeClass("show"), !1
    }), t(), o(".navbar-nav").length && (o(".navbar-nav li a").each(function() {
        var e = window.location.href.split(/[?#]/)[0];
        this.href == e && (o(this).addClass("active"), o(this).parent().parent().addClass("active"), o(this).parent().parent().parent().parent().addClass("active"), o(this).parent().parent().parent().parent().parent().parent().addClass("active"))
    }), o(".navbar-toggle").on("click", function() {
        o(this).toggleClass("open"), o("#navigation").slideToggle(400)
    })), n = o(".navbar-custom .dropdown:not(.app-search)"), o(document).on("click", function(e) {
        return "top-search" == e.target.id || e.target.closest("#search-dropdown") ? o("#search-dropdown").addClass("d-block") : o("#search-dropdown").removeClass("d-block"), !0
    }), o("#top-search").on("focus", function(e) {
        return e.preventDefault(), n.children(".dropdown-menu.show").removeClass("show"), o("#search-dropdown").addClass("d-block"), !1
    }), n.on("show.bs.dropdown", function() {
        o("#search-dropdown").removeClass("d-block")
    }), (a = document.querySelector('[data-toggle="fullscreen"]')) && a.addEventListener("click", function(e) {
        e.preventDefault(), document.body.classList.toggle("fullscreen-enable"), document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement ? document.cancelFullScreen ? document.cancelFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen() : document.documentElement.requestFullscreen ? document.documentElement.requestFullscreen() : document.documentElement.mozRequestFullScreen ? document.documentElement.mozRequestFullScreen() : document.documentElement.webkitRequestFullscreen && document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
    }), o("[data-password]").on("click", function() {
        "false" == o(this).attr("data-password") ? (o(this).siblings("input").attr("type", "text"), o(this).attr("data-password", "true"), o(this).addClass("show-password")) : (o(this).siblings("input").attr("type", "password"), o(this).attr("data-password", "false"), o(this).removeClass("show-password"))
    }), document.querySelectorAll(".needs-validation").forEach(function(t) {
        t.addEventListener("submit", function(e) {
            t.checkValidity() || (e.preventDefault(), e.stopPropagation()), t.classList.add("was-validated")
        }, !1)
    }), jQuery().select2 && o('[data-toggle="select2"]').select2(), jQuery().mask && o('[data-toggle="input-mask"]').each(function(e, t) {
        var n = o(t).data("maskFormat"),
            a = o(t).data("reverse");
        null != a ? o(t).mask(n, {
            reverse: a
        }) : o(t).mask(n)
    }), jQuery().daterangepicker && (r = {
        startDate: moment().subtract(29, "days"),
        endDate: moment(),
        ranges: {
            Today: [moment(), moment()],
            Yesterday: [moment().subtract(1, "days"), moment().subtract(1, "days")],
            "Last 7 Days": [moment().subtract(6, "days"), moment()],
            "Last 30 Days": [moment().subtract(29, "days"), moment()],
            "This Month": [moment().startOf("month"), moment().endOf("month")],
            "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
        }
    }, o('[data-toggle="date-picker-range"]').each(function(e, t) {
        var n = o.extend({}, r, o(t).data()),
            a = n.targetDisplay;
        o(t).daterangepicker(n, function(e, t) {
            a && o(a).html(e.format("MMMM D, YYYY") + " - " + t.format("MMMM D, YYYY"))
        })
    }), i = {
        cancelClass: "btn-light",
        applyButtonClasses: "btn-success"
    }, o('[data-toggle="date-picker"]').each(function(e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).daterangepicker(n)
    })), jQuery().timepicker && (i = {
        showSeconds: !0,
        icons: {
            up: "mdi mdi-chevron-up",
            down: "mdi mdi-chevron-down"
        }
    }, o('[data-toggle="timepicker"]').each(function(e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).timepicker(n)
    })), jQuery().TouchSpin && (i = {}, o('[data-toggle="touchspin"]').each(function(e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).TouchSpin(n)
    })), jQuery().maxlength && (i = {
        warningClass: "badge bg-success",
        limitReachedClass: "badge bg-danger",
        separator: " out of ",
        preText: "You typed ",
        postText: " chars available.",
        placement: "bottom"
    }, o('[data-toggle="maxlength"]').each(function(e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).maxlength(n)
    }))
}

document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('companyForm');
  
  // Show loading state in the button when form is submitted
  function setButtonLoading(isLoading) {
    const saveButton = document.getElementById('saveCompanyBtn');
    if (isLoading) {
      saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
      saveButton.disabled = true;
    } else {
      saveButton.innerHTML = '<i class="bi bi-save"></i> Save';
      saveButton.disabled = false;
    }
  }

  // Validate form inputs
  function validateForm() {
    const name = document.getElementById('companyname').value.trim();
    const description = document.getElementById('description').value.trim();
    const location = document.getElementById('location').value.trim();
    const website = document.getElementById('website').value.trim();
    const size = document.getElementById('size').value.trim();
    const hired_people = document.getElementById('hired_people').value.trim();
    const logoFile = document.getElementById('companylogo').files[0];

    if (!name || !description || !location || !website || !size || !hired_people) {
      Swal.fire({
        icon: 'warning',
        title: 'Missing Information',
        text: 'Please fill in all required fields.',
      });
      return false;
    }

    if (!logoFile) {
      Swal.fire({
        icon: 'warning',
        title: 'Logo Required',
        text: 'Please upload a company logo.',
      });
      return false;
    }

    // Basic validation for website format
    if (!website.startsWith('http://') && !website.startsWith('https://')) {
      Swal.fire({
        icon: 'warning',
        title: 'Invalid Website Format',
        text: 'Website URL should start with http:// or https://',
      });
      return false;
    }

    // Validate hired_people is a positive number
    if (isNaN(hired_people) || parseInt(hired_people) < 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Invalid Number',
        text: 'Hired people should be a positive number.',
      });
      return false;
    }

    return true;
  }

  form.addEventListener('submit', async function (e) {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setButtonLoading(true);

    const name = document.getElementById('companyname').value;
    const description = document.getElementById('description').value;
    const location = document.getElementById('location').value;
    const website = document.getElementById('website').value;
    const size = document.getElementById('size').value;
    const hired_people = document.getElementById('hired_people').value;
    const logoFile = document.getElementById('companylogo').files[0];

    const formData = new FormData();
    formData.append('name', name);
    formData.append('description', description);
    formData.append('location', location);
    formData.append('website', website);
    formData.append('size', size);
    formData.append('hired_people', hired_people);
    formData.append('logo', logoFile);

    // Get authentication token - you might want to store this in a more secure way
    const authToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2pvYml6YWEuY29tL2FwaS9hZG1pbi9sb2dpbiIsImlhdCI6MTc0NzQzMjM3NCwibmJmIjoxNzQ3NDMyMzc0LCJqdGkiOiJLcGlxNDhGdnE3T3hGNXNtIiwic3ViIjoiNSIsInBydiI6ImRmODgzZGI5N2JkMDVlZjhmZjg1MDgyZDY4NmM0NWU4MzJlNTkzYTkiLCJyb2xlcyI6WyJhZG1pbiJdLCJwZXJtaXNzaW9ucyI6WyJtYW5hZ2Utb3duLWNvbXBhbnkiLCJtYW5hZ2UtY29tcGFueS1qb2JzIiwibWFuYWdlLWNvbXBhbnktYWRtaW5zIiwibWFuYWdlLWFwcGxpY2F0aW9ucyIsInZpZXctYXBwbGljYW50LXByb2ZpbGVzIiwic2VuZC1tZXNzYWdlcyJdLCJjb21wYW55X2lkIjo1fQ.ug7Jsd21l2QZ14Uyalsn_0ybTwYwXYhZx8td2doHy5s';

    try {
      const response = await fetch('https://jobizaa.com/api/admin/companies/add-company', {
        method: 'POST',
        headers: {
          "Authorization": `Bearer ${authToken}`
        },
        body: formData
      });

      const result = await response.json();
      console.log('API Response:', result);

      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Company has been added successfully!',
        }).then(() => {
          // Store data in localStorage if needed for immediate display on next page
          const companyData = {
            name: name,
            description: description,
            location: location,
            website: website,
            size: size,
            hired_people: hired_people,
            id: result.data?.id || null
          };
          
          localStorage.setItem('newCompany', JSON.stringify(companyData));
          localStorage.setItem('newCompanyAdded', 'true');
          
          // Redirect to companies listing page
          window.location.href = "company.html";
        });
      } else {
        // Handle API errors
        let errorMessage = 'Failed to save company data.';
        
        if (result.message) {
          errorMessage = result.message;
        } else if (result.errors) {
          // Format validation errors if provided by the API
          const errors = Object.values(result.errors).flat();
          if (errors.length > 0) {
            errorMessage = errors.join('<br>');
          }
        }
        
        Swal.fire({
          icon: 'error',
          title: 'Error',
          html: errorMessage,
        });
      }
    } catch (error) {
      console.error('Network Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Connection Error',
        text: 'Please check your internet connection and try again.',
      });
    } finally {
      setButtonLoading(false);
    }
  });

  // Optional: Preview image before upload
  document.getElementById('companylogo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(event) {
        // You could add an img element to preview the logo if desired
        console.log('Logo selected:', file.name);
      };
      reader.readAsDataURL(file);
    }
  });
});

// Add this script to your navigation pages (like job.html, about.html, etc.)
// This should be included near the top of your JS scripts

document.addEventListener("DOMContentLoaded", function() {
    // Check authentication and access control
    function checkAccess() {
        const authToken = localStorage.getItem("authToken");
        const userRole = localStorage.getItem("userRole");
        
        // If not logged in at all, redirect to login
        if (!authToken) {
            window.location.href = "login.html";
            return;
        }
        
        // Get current page
        const currentPage = window.location.pathname.split("/").pop();
        
        // List of pages accessible to regular users
        const userAccessiblePages = [
            "newpass.html", 
            "signup.html", 
            "job.html", 
            "company.html", 
            "profile.html"
        ];
        
        // Check if regular user is trying to access restricted page
        if (userRole === "user" && !isPageAccessible(currentPage, userAccessiblePages)) {
            // Redirect to allowed page or show access denied
            alert("Access denied. You don't have permission to view this page.");
            window.location.href = "job.html"; // Redirect to an allowed page
        }
    }
    
    // Check if the current page is in the allowed list
    function isPageAccessible(page, allowedPages) {
        return allowedPages.some(allowedPage => 
            page === allowedPage || page === "" && allowedPage === "job.html"
        );
    }
    
    // Run access check
    checkAccess();
    
    // Modify navigation menu visibility based on role
    function updateNavigation() {
        const userRole = localStorage.getItem("userRole");
        
        // If we're on a page with sidebar navigation
        const sidebar = document.querySelector(".sidebar");
        if (sidebar) {
            const menuItems = sidebar.querySelectorAll("li");
            
            if (userRole === "user") {
                // Hide admin-only menu items from regular users
                menuItems.forEach(item => {
                    const linkText = item.querySelector(".text")?.textContent.trim().toLowerCase();
                    
                    // Define which menu items should be hidden from regular users
                    const adminOnlyItems = ["dashboard", "users", "view jobs", "settings"];
                    
                    if (adminOnlyItems.includes(linkText)) {
                        item.style.display = "none";
                    }
                });
            }
        }
    }
    
    // Update navigation elements
    updateNavigation();
});